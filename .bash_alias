# Add an alias.
addalias() {
	trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
	orig="$previous_command"
	echo "Original command: $orig"
	trunc=${orig%-s}
	echo "Optionless command: $trunc"
	if [ "$orig" != "$trunc" ]; then
		echo "THERE WAS AN OPTION HOLY MOLY guacamole."
		strip=${trunc#[a-zA-Z0-9_]*\s} # Removes the initial function call, be it addalias, or alias, w/e.
		full="alias$strip"
		echo $strip
		echo $full
		# eval full # Honestly we don't really have to call the original alias command if we source.
		# Make sure the file exists before you continue.
		if [ ! -f $ABSPATH/.usr_aliases ]; then
			echo "File .usr_aliases does not exist. Creating."
			touch $ABSPATH/.usr_aliases
		fi
		# for later: regex matches all -p options. ((-p\s*)*) Add after matching one word (see strip) to trunc out -p option.
		pre=`expr match "$strip" '\(.*=\)'`
		pre="alias$pre"
		current=$(alias)  # Contains all aliases currently defined
		# current="prankz alias ll=brodyborfobo"
		# pre="alias ll="
		echo "$pre HERE $current"
		echo "PIEPEYPEFYPFE"
		echo "${current#*$pre}"
		first=$(echo -n $current | wc -m)
		second=$(echo -n ${current#*$pre} | wc -m)
		# I'm trying to find whether pre is anywhere in current. why is this hard. 
		if [ "$first" -ne "$second" ]; then
			echo "SOMEBODY IS TRYING TO REALIAS"
		fi
		case "$current" in $pre)
			echo "whoa you exist buddy"
		;;esac
		# Blindly adds aliases to file currently. Should at least check whether it exists?
	fi
}
