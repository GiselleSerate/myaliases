# vanilla compile; fully compile independent c++ file according to 70 standards
# usage: pass one argument that does not contain the file extension.
#	 an optional second argument specifies the file extension
clangv() {
	clang++ -std=c++11 -pedantic -Wall -Wextra "$1".cpp -o "$1${2:-}";
}

# a wrapper for clangv that immediately runs the output file after compilation
# this is useful for quick debugging and editing
# usage: same as clangv
clangc() {
	clangv "$@" && ./"$1${2:-}";
}

# partial compile c++ to output file
# usage: pass one argument that does not contain the file extension.
#	 an optional second argument specifies the file extension
clangp() {
	clang++ -c -o "$1${:-.o}" -std=c++11 -pedantic -Wall -Wextra "$1".cpp;
}

# link c++ file according to 70 standards and run the compiled program automatically
# usage: pass one argument to link into and any other sources
#	 that you're inserting as subsequent arguments in the
#	 order of most dependent to least dependent.
#	 leave off any file extensions
clangl() {
	local ARGS=("$@") && clang++ -o "$1" ${ARGS[@]/%/.o} && ./"$1";
}

# a wrapper for clangl and clangp.
# it partially compiles c++ to output files and then
# links the ouput files according to 70 standards
# and then runs the compiled program automatically
# usage: pass one argument to link into and any other sources
#	 that you're inserting as subsequent arguments in the
#	 order of most dependent to least dependent.
#	 leave off any file extensions
clangpl() {
	local args=("$@") && args=${args/#/" && clangp "} && eval ${args/" && "/} && clangl $@;
}
