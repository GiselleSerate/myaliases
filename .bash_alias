# Helper function which takes one argument and writes the alias to file.
# Argument taken in the form nickname='commands' or nickname="commands".
setpermalias() {

	# Make sure the file exists before you continue.
	if [ ! -f $ABSPATH/.usr_aliases ]; then
		echo "File .usr_aliases does not exist. Creating."
		touch $ABSPATH/.usr_aliases
	fi

	# Define alias in current session.
	alias "$1"

	# Isolate nickname from alias.
	nick=`expr match "$1" '\(.*=\)'` # nick will be of form "myname="
	nick=$(echo "$nick" | tr -dc '[:alnum:]') # nick is now alphanumeric only

	# Identify code to define this alias.
	full=$(alias $nick)

	# Clear name definition if it already exists.  
	# printf 'g/^alias $1d' | ed -s $ABSPATH/.usr_aliases > /dev/null 2>&1
	reg="g/^alias $nick.*/d" #"$nick"
	echo "$reg"
	# printf 'g/^alias %s/d' "$nick" | ed -s $ABSPATH/.usr_aliases > /dev/null 2>&1

	ed -s $ABSPATH/.usr_aliases <<< "$reg" # > /dev/null 2>&1		

	# Write new permanent alias to file.
	echo "Creating new permanent alias: $full"
	echo "$full" >> $ABSPATH/.usr_aliases

	src # Assumes that you have enabled src from .bash_nav.

}

altalias() {

	# Check if the -s option is enabled.
	while getopts "s" opt; do
		case ${opt} in
			s) local should_save="true"; shift;;
		esac
	done

	# If you're trying to make a permanent alias.
	if [ -n should_save ]; then

		# Iterate over all arguments.
		for arg in "$@"
		do
			# if arg is not -s
			if [ "$arg" != "-s" ]; then
				# call setpermalias on it
				setpermalias "$arg"
			fi
		done
	fi
}

# Add an alias.
addalias() {
	# Capture the command that the user typed in. 
	trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
	orig="$previous_command" # Original command.

	# Check if the -s option is enabled.
	while getopts "s" opt; do
		case ${opt} in
			s) local should_save="true"; shift;;
		esac
	done

	# Clean option and call name from function call. 
	strip=${orig%-s} # Remove option if it's at the end. 
	strip=${strip#[a-zA-Z0-9_]*\s*(-s)*} # Removes the initial function call, be it addalias, or alias, w/e. Also removes a -s if it is there.
	full="alias$strip" # This is what the call to alias would normally look like. 

	# REGEX FUTURE REFERENCE: prawns=$(expr "abcdef" : "abc")
	
	# If you're trying to make a permanent alias.
	if [ -n should_save ]; then

		# Make sure the file exists before you continue.
		if [ ! -f $ABSPATH/.usr_aliases ]; then
			echo "File .usr_aliases does not exist. Creating."
			touch $ABSPATH/.usr_aliases
		fi

		# Check if the alias has already been defined in this session.
		pre=`expr match "$strip" '\(.*=\)'` # pre will be of form "alias myname="
		pre="alias$pre"
		current=$(alias)  # Contains all aliases currently defined
		# Compare lengths of strings to determine if regex deletion happened.
		first=$(echo -n $current | wc -m)
		second=$(echo -n ${current#*$pre} | wc -m)
		if [ "$first" -ne "$second" ]; then
			# The name is already defined in this namespace. 
			# Is the name defined by our file? 
			if [ grep -c "$pre" $ABSPATH/.usr_aliases -gt 0 ]; then
				echo "WE defined this nonsense"
			fi
			
			echo "The name you are trying to alias is already defined in this session. Please unalias the name first."
			# What are we going to do if they try to realias? 
			# Unalias for the current session? Unalias semi-permanently in my file?
		else
			# Write new permanent alias to file.
			echo "Creating new permanent alias: $full"
			echo "$full" >> $ABSPATH/.usr_aliases
			src # Assumes that you have enabled src from .bash_nav.
		fi
	else
		eval full
	fi
}

# Include all user-created aliases if the generated file exists. 
if [ -f $ABSPATH/.usr_aliases ]; then
	. $ABSPATH/.usr_aliases
fi
