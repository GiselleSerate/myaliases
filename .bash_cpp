# Valgrind run on file
val() {
	valgrind --leak-check=full ./"$1"
}

# Valgrind to file
valf() {
	valgrind --leak-check=full ./"$1" 2>| "$1"-val.out
}

# Makes and then valgrinds a file.
mval() {
	make "$1"
	val "$1"
}

# Makes and then valgrinds to a file
mvalf() {
	make "$1"
	valf "$1"
}

# Vanilla; fully compile independent c++ file
# usage: pass one argument that does not contain the file extension.
#	 an optional second argument specifies the file extension.
#	 don't include the dot in your second argument
clangv() {
	echo clang++ -std=c++11 -pedantic -Wall -Wextra "$1".cpp -o "$1${2+.}${2:-}";
	clang++ -std=c++11 -pedantic -Wall -Wextra "$1".cpp -o "$1${2+.}${2:-}";
}

# Run; a wrapper for clangv that immediately runs the output file after compilation
# this is useful for quick debugging and editing
# usage: same as clangv
clangr() {
	echo clangv "$@" && ./"$1${2+.}${2:-}";
	clangv "$@" && ./"$1${2+.}${2:-}";
}


# Partial; partially compile c++ to output file
# usage: pass one argument that does not contain the file extension.
#	 an optional second argument specifies the file extension
#	 don't include the dot in your second argument
clangp() {
	echo clang++ -c -o "$1.${2:-o}" -std=c++11 -pedantic -Wall -Wextra "$1".cpp;
	clang++ -c -o "$1.${2:-o}" -std=c++11 -pedantic -Wall -Wextra "$1".cpp;
}


# Link; link c++ file and run the compiled program automatically
# usage: pass one argument to link into and any other sources
#	 that you're inserting as subsequent arguments in the
#	 order of most dependent to least dependent.
#	 leave off any file extensions
clangl() {
	local ARGS=("$@");
	echo clang++ -o "$1" ${ARGS[@]/%/.o};
	clang++ -o "$1" ${ARGS[@]/%/.o}; 
	echo ./"$1";
	./"$1";
}

# Total; a wrapper for clangl and clangp.
# Partial compiles all inputs to .o output files, links these outputs, 
# and then runs the final program.
# usage: pass one argument to link into and any other sources
#	 that you're inserting as subsequent arguments in the
#	 order of most dependent to least dependent.
#	 leave off any file extensions
clangt() {
	for arg; do
		clangp "$arg";
	done
	clangl "$@";
}

# Delete; a wrapper for clangt that cleans up once the program has been run.
# Partial compiles all inputs to .o output files, links these outputs, 
# and then runs the final program. Deletes all .o and executables.
# usage: pass one argument to link into and any other sources
#	 that you're inserting as subsequent arguments in the
#	 order of most dependent to least dependent.
#	 leave off any file extensions
clangd() {
	local ARGS=("$@");
	clangt "$@";
	echo Deleting all object and executable files: ${ARGS[@]/%/.o} "$1";
	rm ${ARGS[@]/%/.o} "$1";
}
