# The subtrap command allows for easy, automatic, guaranteed trapping
# By running your commands in a subshell, you don't have to worry about
# conflicting traps or setting multiple traps for many different signals
# (since the only important signal is the subshell's EXIT)
#
# param1: the set of clean up commands
# param2+: any set of commands to execute in the subshell
subtrap() { (
	trap "$1" EXIT
	shift
	eval "$@"
) }

# The _ftee command uses tee to copy stdin to multiple FIFOs (aka named pipes)
#
# param1: optional - path to a directory in which _ftee should store its FIFOs
# param2: required - the number of named pipes to create; must be an int > 0
# output: a string containing the space separated paths to each named pipe
_ftee() {
	# check: has the user specified the tmp dir and the right number of args?
	if [ $# -ge 2 ]; then
		local tmp="$1"
		shift
	elif [ $# -eq 1 ]; then
		local tmp="$(mktemp -d)"
	else
		exit 1
	fi
	# generate a string containing a space separated list of FIFOs
	local fifos="$(echo "for(i=1;i<=$1;++i) i" | bc | sed "s:^:$tmp/:" | paste -s -d' ')"
	# handle cases where the number of FIFOs provided is a string or 0
	test -z "$fifos" && exit 1
	# print, make, and tee to the FIFOs
	echo "$fifos"
	mkfifo $fifos && tee $fifos 2>&1 >/dev/null
}
alias ftee="subtrap 'rm -rf \$tmpd' 'tmpd=\$(mktemp -d) && _ftee \$tmpd'"
